// Automatically generated by MockGen. DO NOT EDIT!
// Source: file.go

package receiver

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of fileSystemWorker interface
type MockfileSystemWorker struct {
	ctrl     *gomock.Controller
	recorder *_MockfileSystemWorkerRecorder
}

// Recorder for MockfileSystemWorker (not exported)
type _MockfileSystemWorkerRecorder struct {
	mock *MockfileSystemWorker
}

func NewMockfileSystemWorker(ctrl *gomock.Controller) *MockfileSystemWorker {
	mock := &MockfileSystemWorker{ctrl: ctrl}
	mock.recorder = &_MockfileSystemWorkerRecorder{mock}
	return mock
}

func (_m *MockfileSystemWorker) EXPECT() *_MockfileSystemWorkerRecorder {
	return _m.recorder
}

func (_m *MockfileSystemWorker) Readdirnames(at string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "Readdirnames", at)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockfileSystemWorkerRecorder) Readdirnames(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Readdirnames", arg0)
}

func (_m *MockfileSystemWorker) MkdirAll(pathName string) error {
	ret := _m.ctrl.Call(_m, "MkdirAll", pathName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockfileSystemWorkerRecorder) MkdirAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MkdirAll", arg0)
}

func (_m *MockfileSystemWorker) IsDir(pathName string) bool {
	ret := _m.ctrl.Call(_m, "IsDir", pathName)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockfileSystemWorkerRecorder) IsDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDir", arg0)
}

func (_m *MockfileSystemWorker) WriteFile(pathName string, data []byte) error {
	ret := _m.ctrl.Call(_m, "WriteFile", pathName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockfileSystemWorkerRecorder) WriteFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteFile", arg0, arg1)
}
